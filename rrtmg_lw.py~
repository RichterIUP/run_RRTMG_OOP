#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jul 12 16:26:11 2021

@author: philipp
"""

import os
import subprocess
import pandas as pd
import netCDF4 as nc
import datetime as dt
import numpy as np
import matplotlib.pyplot as plt
import scipy.interpolate
import read_database as mie
from create_rrtmg_input import input_rrtm, in_cld_rrtm, read_results

class RRTMG:
    def __init__(self, binary, keys, mie_db):
        self.__binary = binary
        self.__keys = keys
        [self.__liq_db, self.__ice_db] = mie.read_databases(mie_db[0], mie_db[1])

    def read_tcwret(self, fname, input_radiance):
        pattern = fname.split("/")[-1]
        date = dt.datetime.strptime(pattern, "results_%Y%m%d%H%M%S.nc")
        time_dec = date.hour + date.minute/60.0 + date.second/3600.0

        with nc.Dataset(os.path.join(input_radiance, "PS.{:04d}{:02d}{:02d}.nc".format(date.year, date.month, date.day))) as f:
            idx = np.argmin(np.abs(f.variables['time_dec'][:]-time_dec))
            self.__wavenumber = f.variables['wavenumber'][idx]
            self.__spectrum = f.variables['radiance'][idx]
        
        with nc.Dataset(fname, "r") as f:
            print(f)
            self.__height_prof = f.variables['z'][:]*1e-3
            self.__pressure_prof = f.variables['P'][:]
            self.__humidity_prof = f.variables['humidity'][:]
            self.__temperature_prof = f.variables['T'][:]
        
            self.__red_chi_2 = f.variables['red_chi_2'][:]
            self.__xret = f.variables['x_ret'][:]
            self.__clevel = np.where(self.__height_prof == f.variables['clevel'][:]*1e-3)[0]
            self.__rliq = np.exp(f.variables['x_ret'][2])
            self.__rice = np.exp(f.variables['x_ret'][3])
            self.__lwp = mie.calc_lwp(self.__rliq, 0.0, self.__xret[0], 0.0)[0]
            self.__iwp = mie.calc_iwp(self.__xret[1], 0.0, self.__rice, 0.0, self.__ice_db)[0]
            print(self.__red_chi_2)
            
    def plot_atmosphere(self):
        fig, ax = plt.subplots(1, 2, figsize=(5, 10))
        ax[0].set_title("Height coordinates")
        ax[1].set_title("Pressure coordinates")
        ax[0].plot(self.__humidity_prof, self.__height_prof, label="Humidity")
        ax[0].plot(self.__temperature_prof, self.__height_prof, label="Temperature")
        ax[1].plot(self.__humidity_prof, self.__pressure_prof, label="Humidity")
        ax[1].plot(self.__temperature_prof, self.__pressure_prof, label="Temperature")
        ax[1].set_ylim([1013, 0])
        for i in range(2):
            ax[i].grid(True)
            ax[i].legend()
        plt.show()
        
    def create_inputfile(self, cloud=[-1], **kwargs):
        ret = input_rrtm(height_prof=self.__height_prof, \
                       pressure_prof=self.__pressure_prof, \
                       humidity_prof=self.__humidity_prof, \
                       temperature_prof=self.__temperature_prof, window=5)
        if cloud[0] != -1:
            cld = in_cld_rrtm(lay_liq=cloud, lay_ice=cloud, cwp=cwp, rliq=rl, rice=ri, fice=wpi, clt=np.ones(cwp.size))
        else:
            cld = in_cld_rrtm(lay_liq=[self.__clevel], \
                               lay_ice=[self.__clevel], \
                               cwp=[self.__lwp+self.__iwp], \
                               rliq=[self.__rliq], \
                               rice=[self.__rice], \
                               fice=[self.__iwp/(self.__lwp+self.__iwp)], \
                               clt=[1])
        with open("IN_CLD_RRTM", "w") as f:
            f.write(cld)
        with open("INPUT_RRTM", "w") as f:
            f.write(ret)
            
    def run_RRTMG(self):
        subprocess.call(['{}'.format(self.__binary)])
        self.__fluxes = read_results(len(self.__height_prof), self.__keys)
        
    def get_fluxes(self):
        return self.__fluxes
    
    def remove_rrtmg_files(self):
        os.remove('TAPE6')
        os.remove('TAPE7')
        os.remove('INPUT_RRTM')
        os.remove('IN_CLD_RRTM')
        os.remove('OUTPUT_RRTM')

    def integrate_spectral_radiance(self, intervall):
        delta = 0.1
        radiance_f = scipy.interpolate.interp1d(self.__wavenumber, self.__spectrum)
        radiance_integral = 0
        wn = intervall[0]
        while wn < intervall[1]:
            radiance_integral += radiance_f(wn)
            wn += delta
        
        print(np.pi*1e-3*radiance_integral*delta)
        pass
        
if __name__ == '__main__':
    window = [[10., 350.], [350., 500.], [500., 630.], [630., 700.], [700., 820.], \
              [820., 980.], [980., 1080.], [1080, 1180], [1180, 1390]]
    model = RRTMG("./rrtmg_lw_v5.00_linux_pgi", \
                  ['LEVEL', 'PRESSURE', 'DOWNWARD FLUX',], \
                  ["/home/philipp/Doktorandenzeit/SOFTWARE_PHD/Total_Cloud_Water_retrieval/ssp_database/ssp_db.mie_wat.gamma_sigma_0p100", "/home/philipp/Doktorandenzeit/SOFTWARE_PHD/Total_Cloud_Water_retrieval/ssp_database/ssp_db.Droxtal.gamma.0p100"])
    model.read_tcwret("/home/philipp/Doktorandenzeit/DATA_PHD/FTIR/TCWret/retrievals_single/Polarstern_retrievals_diff_shape/droxtals/RESULTS/results_20170806135215.nc", "/home/philipp/Doktorandenzeit/DATA_PHD/FTIR/PASCAL_SiPCA_FRAM_2017/radiance")
    #model.plot_atmosphere()
    model.create_inputfile(window=6)
    model.run_RRTMG()
    print(model.get_fluxes()['DOWNWARD FLUX'].iloc[-1])
    model.remove_rrtmg_files()
    model.integrate_spectral_radiance(window[6])